417,554,556,560


1. map
    1.1 map funkcian karanq ogtagorcenq erb vor menq uzum enq inch vor mi funkcia ogtagorcel
        mer iteracvox obyekti itemneri nkatmamb
        orinak
        
		def change_item(arg):
			return str(arg) + '-is changed'
					
		L = [1, 2, 3, 'item1', 'item2']

		map_object = map(change_item, L) # return map object

		print(list(map_object)) # we can change to any type
		
	1.2 arajin parametrov talis enq funkcia, isk dranic heto gnvox parametrer@ et mer funkciayi
		trvox parametrer en 
		orinak
		def change_item(arg,arg2):
			return str(arg) + str(arg2)
					
		L = [1, 2, 3, 'item1', 'item2']
		S = 'spam'

		map_object = map(change_item, L, S)

		print(list(map_object))
		
	1.3 karanq anenq gorcoxutyunner vonc cankacac iteracvox obyektneri het
		
		for item in map_object:
			print(item)
		
		kam 
		
		next(map_object)
		
	1.4 shat harmara miangamic lambda poxancel
	
		def change_item(arg,arg2):
			return str(arg) + ' from ' + str(arg2) +'-is changed'
					
		L = [1, 2, 3, 'item1', 'item2']
		S = 'spam'

		map_object = map(lambda x,y: str(x) + str(y),L, 'hello')

		for item in map_object:
			print(item)
2. reduce
	2.1 petq e import anel nax functools modulic 
		reduce funkcian @ndunuma 3 parametr 
		
		1. vorpes arajin parametr funkcia
		2. sequence
		3. initial(optional)
		
		reduce nax vercnuma mer tvac sequence-i arajin erku item-ner@
		heto stanuma arden return arac arjeq@ u 3-rd item@ u tenc sharunak
		orinak
		
		from functools import reduce

		numbers = [3, 4, 6, 9, 34, 12]

		def custom_sum(first, second):
			print(first,second,sep="||") # skzbum 3,4 heto iranc gumar@ + 3-rd item (7 + 6)
			return first + second

		result = reduce(custom_sum, numbers)
		print(result)
		
	2.2 initial
		vorpes errord parametr karox enq tal inc vor skzbnakan value
		
		numbers = [3, 4, 6, 9, 34, 12]

		def custom_sum(first, second):
			print(first,second,sep="||") # skzbum 10,3 heto iranc gumar@ + 2-rd item (13 + 4)
			return first + second

		result = reduce(custom_sum, numbers,10)
		print(result)
		
		
		
	2.2 orinak karanq string tanq
		S = 'spam'

		def custom_sum(first, second):
			print(first,second,sep="||")
			return first + second

		result = reduce(custom_sum, numbers)
		print(result)
		
	2.3	ete inch vor ban return chanenq avtomat kveradarcni None
	
		numbers = [3, 4, 6, 9, 34, 12]

		def custom_sum(first, second):
			print(first,second,sep="||")
			#return chenq anum
			
		result = reduce(custom_sum, numbers)
		print(result)
		
	2.4 karanq tanq lambda
	
		numbers = [3, 4, 6, 9, 34, 12]

		result = reduce(lambda x,y: x + y, numbers)
		print(result)
3. filter
	3.1 filter method@ karox enq ogtagorcel mer sequence custom filter@  anelu hamar
	3.2 @ndunuma erku parametr
		1. function
		2. sequence
	3.3 orinak
	    def less_than_five(arg):
	    	return arg < 5

	    sequence = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

            filtered_seq = filter(less_than_five,sequence)

            print(list(filtered_seq))
	    
	3.4 def find_a(arg):
 	    	if arg == 'l':
			return True
	    	else:
			return False


	    some_text = 'hello world'

	    filtered_seq = filter(find_a,some_text)

	    print(tuple(filtered_seq))
	    
        3.5 lambda
	    
	    some_text = 'hello world'

            filtered_seq = filter(lambda x: x == 'l' ,some_text)

            print(tuple(filtered_seq))

