----- GIT -----

***** Git Chapters *****

1.	Verision Control Systems Intro

	1.1 Системы контроля версий (VCS) первого поколения отслеживали изменения в отдельных файлах, а редактирование поддерживалось только локально и одним
	пользователем за раз. Системы строились на предположении, что все пользователи будут заходить по своим учётными записям на один и тот же общий узел Unix.
	
	First Generation
	SCCS (Source Code Control System)
	RCS (Revision Control System)
	
	1.2 В VCS второго поколения появилась поддержка сети, что привело к централизованным хранилищам с «официальными» версиями проектов.
	Это был значительный прогресс, поскольку несколько пользователей могли одновременно работать с кодом, делая коммиты в один и тот же центральный репозиторий.
	Однако для коммитов требовался доступ к сети.
	
	Second Generation
	CVS (Concurrent Versions System)
	SVN (Apache Subversion)
	Perforce Helix Core
	
	1.3 Третье поколение состоит из распределённых VCS, где все копии репозитория считаются равными, нет центрального репозитория. Это открывает путь для
	коммитов, ветвей и слияний, которые создаются локально без доступа к сети и перемещаются в другие репозитории по мере необходимости.
	
	Third Generation
	Git
	
2.	Git Intro
	
	2.1 Все в Git перед сохранением проверяется контрольной суммой, а затем на нее ссылается эта контрольная сумма. это
	означает, что невозможно изменить содержимое любого файла или каталога без ведома Git.
	Эта функциональность встроена в Git на самых низких уровнях и является неотъемлемой частью его философии. Вы не можете проиграть
	информация в пути или повреждение файла без возможности обнаружения Git.
	Механизм, который Git использует для этого контрольного суммирования, называется хешем SHA-1. Это 40-символьный
	строка, состоящая из шестнадцатеричных символов (0–9 и a – f) и вычисленная на основе содержимого
	структура файлов или каталогов в Git. Хеш SHA-1 выглядит примерно так:

	24b9da6552252987aa493b52f8696cd6d3b00373
	Вы будете видеть эти хеш-значения повсюду в Git, потому что он их очень много использует. Фактически, Git
	хранит все в своей базе данных не по имени файла, а по хэш-значению его содержимого.
3.	Installing Git 


4.	Git Config


5.	Local Basics


6.	Branching
	
	6.1	local dev and master
	6.2 merge
	
7.	Remote Basics

	7.1 GitHub Regsitration
	7.2	GitHub PR
	7.3	SSH Auth

----- ADVENCED GIT -----

1.	History Details
2.	Commands
3.	Git Flou
4.	Many Remotes
5.	Smart Git


----- GIT COMMANDS -----


4.	git clone


6.	git add
7.	git diff
8.	git commit
5.	git status
9.	git remove file
	git stash

10.	git commit history
11.	git reset
12.	git checkout
13.	git fetch
14.	git remote add pb https://github.com/paulboone/ticgit(page 50)
15.	git push
16.	git tag
17	(Git Aliases) git config --global alias.unstage 'reset HEAD --'
18.	git branch
19.	git merge (Conflicts - page 74)
20.	git pull
21.	git rebase
22.	git cherry-pick(page 160)

----- GENERATE SSH -----
page - 110
