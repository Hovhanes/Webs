----- GIT -----

***** Git Chapters *****

1.	Verision Control Systems Intro

	1.1 Системы контроля версий (VCS) первого поколения отслеживали изменения в отдельных файлах, а редактирование поддерживалось только локально и одним
	пользователем за раз. Системы строились на предположении, что все пользователи будут заходить по своим учётными записям на один и тот же общий узел Unix.
	
	First Generation
	SCCS (Source Code Control System)
	RCS (Revision Control System)
	
	1.2 В VCS второго поколения появилась поддержка сети, что привело к централизованным хранилищам с «официальными» версиями проектов.
	Это был значительный прогресс, поскольку несколько пользователей могли одновременно работать с кодом, делая коммиты в один и тот же центральный репозиторий.
	Однако для коммитов требовался доступ к сети.
	
	Second Generation
	CVS (Concurrent Versions System)
	SVN (Apache Subversion)
	Perforce Helix Core
	
	1.3 Третье поколение состоит из распределённых VCS, где все копии репозитория считаются равными, нет центрального репозитория. Это открывает путь для
	коммитов, ветвей и слияний, которые создаются локально без доступа к сети и перемещаются в другие репозитории по мере необходимости.
	
	Third Generation
	Git
        Mercurial
        BitKeeper
        Darcs (Darcs Advanced Revision Control System)
        Monotone
        Bazaar
        Fossil
	
	1.4 Git Intro
	
	Все в Git перед сохранением проверяется контрольной суммой, а затем на нее ссылается эта контрольная сумма. это
	означает, что невозможно изменить содержимое любого файла или каталога без ведома Git.
	Эта функциональность встроена в Git на самых низких уровнях и является неотъемлемой частью его философии. Вы не можете проиграть
	информация в пути или повреждение файла без возможности обнаружения Git.
	Механизм, который Git использует для этого контрольного суммирования, называется хешем SHA-1. Это 40-символьный
	строка, состоящая из шестнадцатеричных символов (0–9 и a – f) и вычисленная на основе содержимого
	структура файлов или каталогов в Git. Хеш SHA-1 выглядит примерно так:

	24b9da6552252987aa493b52f8696cd6d3b00373
	Вы будете видеть эти хеш-значения повсюду в Git, потому что он их очень много использует. Фактически, Git
	хранит все в своей базе данных не по имени файла, а по хэш-значению его содержимого.
	
	1.5 Installing Git

2.	2.1 Git Config
	
	2.2 Local Basics
	
	2.3 Commands
	    git add
	    git commit
	    git status
	    git commit history
	    git checkout

3.	Local basics 2 
	
	3.1 Commands
	git diff
	git rm file_path
	git rm --cached file_path
	git reset "hash|HEAD"
	git checkout file_path (staged files)

4.	Branching
	
	4.1 local dev and master
	
	Commands
	Branching
	
	git branch new_branch
	git checkout new_branch
	git checkout -b new_branch
	git diff branch_name1..branch_name2
	
	Git stash
	
	git stash 	
	git stash list
	git stash pop | apply
	git stash clear
	
	Git tag
	git tag tag_name
	git tag -a v1.3
	git tag -a v1.3 -m "my version 1.3"
	git tag
	git tag -a -f v1.3 hash
	git tag -d v1
	
	
5.      Merge and conflicts
	
	5.1 merge  
	
	5.2 conflict resolution
	
	Commands
	
	git merge < branch name >
	
	
6.	Remote Basics
	
	6.1 GitHub Regsitration
	git clone
	git fetch
	git push
	git pull

7.	Remote Basics 2
	7.2	GitHub PR
	7.3	SSH Auth
	7.4	Many remote

	7.5. Commands
	
	Check ssh
	ls -al ~/.ssh

	Genrate ssh

	ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

	add ssh to agent

	eval "$(ssh-agent -s)"
	
	check ssh connect
	
	ssh -T git@github.com
	
----- ADVENCED GIT -----

1.	History Details
2.	Commands
3.	Git Flou
4.	Many Remotes
5.	Smart Git
6.	git commit --amend
7.      git remote(add, rm, rename)
----- GIT COMMANDS -----



1	(Git Aliases) git config --global alias.unstage 'reset HEAD --'
2.	git rebase
3.	git cherry-pick(page 160)

----- GENERATE SSH -----
page - 110
