'''

    1. iteratorner
    
        1.1 for, in, genratorner - sranc takic sax obyekti __next__ en kanchum
        
        1.2 dzerqo kanchenq __next__
            __next__ metod unen sax
            orinak failer@
            
            f = open('script1.py') 
            f.__next__()
            f.__next__() # verjum exceptiona talu - StopIteration
            
            for line in open(‘script1.py’).readlines(): # stex miangamic sax faiL@ karduma vor@ vor lav chi hishoxutyan  ekanomiayi hamar
                 print(line.upper(), end=)
                 
            f = open('script1.py') # es tarberak@ aveli dandax kasxxati qan vor tanq for-in
            while True:
                line = f.readline()
                if not line: break
                print(line.upper(), end='')
                
         
            file = open('db.txt') # next() funkcia - uxaki kanchuma __next__ method@
            
            print(next(file))
            print(next(file))
            print(file.__next__())
            print(file.__next__())
            
            iter(file) is file # True
            
            L = [1, 2, 3]
            iter(L) is L # False
            L.__next__() # Error kta
            
            I = iter(L) # senc karanq heto iranic kanchenq __next__
            I.__next__() #
            
            # dicti __next__
            D = {‘a’:1, ‘b’:2, ‘c’:3}
            I = iter(D)
            next(I) #  keyerna tpum
            
            # nuyn ban@ forna anum uxaki avtomat
            for key in D:
                print(key, D[key])
                
            # range()
            R = range(5)
            I = iter(R)
            next(I)
            
            
        1.3 lines = f.readlines()
            lines = [line.rstrip() for line in lines] # miangamic jnjum enq amboxj \n-er@
            
            lines = [line.rstrip() for line in open('script1.py')] # senc amen angam kanchum enq file-i __next__ 
            
            
            
    unenq erku tesaki genratorner
    1   funkciayi generatorner
    2.  generatorner artahaytutyunov

    erkusic voch mek chi sarqum mianqamic sax u hnaravorutyuna talis ekanomia anel hishoxutyun@
    u stexcelu pahin anel inch vor gorcoxutyunner


    1  list-i generatorner

        1.1 nax canotananq ord() u chr() funkcianeri het
            ord('s') # pring kani 115, aysinqn vor veradarnuma te mer simvol@ inch vor hamarina hamapatasxanum
            chr(115) # pring kani s, aysinqn ord()-i hakarakna
        1.2 hima entadrenq uzum enq list unenal vor mej@ ktpenq mer 'spam' bari symvolner-i koder@
            skzbum senc karanq anenq
             res = []
             for x in ‘spam’:
                 res.append(ord(x))

             print(res)
            [115, 112, 97, 109]

            nuyn@ karanq senc anel

            res = [ord(x) for x in 'spam']

            1.  es artahaytutyun@ veradarcnuma nor list
            2.  [x for x in range(5) if x % 2 == 0] karanq unenanq if

            3. matrica (orinak)
                M = [[1, 2, 3],
                     [4, 5, 6],
                     [7, 8, 9]]
                 [row[1] for row in M]

            4. sovorakan map-@ for-ic mapic hamarya 2 angam avela ahxatum, isk genetaorg@ mapicela ashxatum,
                et nranica vor map-@ u  generatorner@ C-i kodov en asxatum is for abrabotkaya linum pythoni
                Virtual machinum

            5. for x in [n**2 for n in range(5)]:
                    print(x, end= ':')

    2. funkciayov generatorner - yield

        2.1     i tarberutyun return-i tuyla talis amen angam veradarcnel arjeq bayc lriv durs chi galis funkcayic
                ayl pahpanuma ira local informacian(информацию о своем состоянии)

        2.2     def gensquares(N):
                    for i in range(N):
                    yield i ** 2

                for i in gensquares(5): # Возобновить работу функции
                     print(i, end =  ':' )

                >>> x = gensquares(4)
                >>> x
                <generator object at 0x0086C378>

        2.3     verjacnelu hamar karanq return ogtagorcenq kam toxenq minchec verjana uxaki


    3. generatorner artahaytutyunov

        3.1    [x ** 2 for x in range(4)] #sarquma list ( list(x ** 2 for x in range(4)) ) hamarya nuyn banna

               (x ** 2 for x in range(4)) #sarquma generatori object

       3.2     G = (c * 4 for c in 'SPAM')

               havasara sran

               def timesfour(S): # Функция-генератор
                    for c in S:
                    yield c * 4

               G = timesfour('spam')
               list(G)
               
    4.  set-i u dict-i generatorner
    
        4.1 {x * x for x in range(10)} #set
            res = set()
            for x in range(10): # set0i generator functionov
                res.add(x * x)
        
        4.2 {x: x * x for x in range(10)} #dict
        
        
'''




